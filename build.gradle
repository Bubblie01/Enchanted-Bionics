//file:noinspection GroovyAssignabilityCheck
plugins {
	id('fabric-loom') version('0.11.+')
	id('maven-publish')
	id('io.github.juuxel.loom-quiltflower') version('1.6.0')
	id('org.quiltmc.quilt-mappings-on-loom') version('4.0.0')
}

def targetJavaVersion = 17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		url = 'https://api.modrinth.com/maven'
		content { includeGroup 'maven.modrinth' }
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		//it.officialMojangMappings()
		it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${project.quilt_mappings}:v2"))
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modRuntimeOnly 'maven.modrinth:lazydfu:0.1.2'
}

processResources {
	inputs.property 'version', project.version

	filesMatching('fabric.mod.json') {
		expand 'version': project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release.set(targetJavaVersion)
	it.options.deprecation(true)
    it.options.encoding('UTF-8')
}

java {
	sourceCompatibility = JavaVersion.toVersion(targetJavaVersion)
	targetCompatibility = JavaVersion.toVersion(targetJavaVersion)

	withSourcesJar()
}

jar {
	from('LICENSE') {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories { }
}

quiltflower {
    addToRuntimeClasspath.set(true)
}

runClient {
	jvmArgs('-Dmixin.debug.export=true', '-Xmx1536m')
}
